#include "xtmrctr.h"
#include "xparameters.h"
#include "xil_printf.h"
#include "xuartps.h"

#define PWM_PERIOD 100000000 // Example PWM period (adjust based on your requirements)
#define UART_DEVICE_ID XPAR_XUARTPS_0_DEVICE_ID

XUartPs Uart_Ps; // Instance of the UART Device
XUartPs_Config *Config;

int InitUart()
{
    int Status;
    Config = XUartPs_LookupConfig(UART_DEVICE_ID);
    if (NULL == Config) {
        return XST_FAILURE;
    }

    Status = XUartPs_CfgInitialize(&Uart_Ps, Config, Config->BaseAddress);
    if (Status != XST_SUCCESS) {
        return XST_FAILURE;
    }

    XUartPs_SetBaudRate(&Uart_Ps, 115200);
    return XST_SUCCESS;
}

void UpdatePwmDutyCycle(XTmrCtr *TimerCounterInst, u32 channel, u32 dutyCycle)
{
    XTmrCtr_SetPwmValue(TimerCounterInst, channel, (PWM_PERIOD * dutyCycle) / 100);
}

int main()
{
    XTmrCtr TimerCounterInst; // Timer instance
    int Status;
    u32 DutyCycle0 = 25; // Starting duty cycle for PWM0 (percentage)
    u32 DutyCycle1 = 75; // Starting duty cycle for PWM1 (percentage)

    // Initialize the timer counter
    Status = XTmrCtr_Initialize(&TimerCounterInst, XPAR_TMRCTR_0_DEVICE_ID);
    if (Status != XST_SUCCESS) {
        xil_printf("Timer initialization failed\r\n");
        return XST_FAILURE;
    }

    // Set up PWM for timer 0
    XTmrCtr_SetOptions(&TimerCounterInst, 0, XTC_PWM_ENABLE_OPTION);
    XTmrCtr_SetResetValue(&TimerCounterInst, 0, PWM_PERIOD - 1);
    XTmrCtr_SetPwmValue(&TimerCounterInst, 0, (PWM_PERIOD * DutyCycle0) / 100);
    XTmrCtr_Start(&TimerCounterInst, 0);

    // Set up PWM for timer 1
    XTmrCtr_SetOptions(&TimerCounterInst, 1, XTC_PWM_ENABLE_OPTION);
    XTmrCtr_SetResetValue(&TimerCounterInst, 1, PWM_PERIOD - 1);
    XTmrCtr_SetPwmValue(&TimerCounterInst, 1, (PWM_PERIOD * DutyCycle1) / 100);
    XTmrCtr_Start(&TimerCounterInst, 1);

    xil_printf("PWM setup complete. Running...\r\n");

    while (1) {
        // Here, you would typically handle control inputs to change DutyCycle0 and DutyCycle1
        // For simplicity, this infinite loop simulates continuous running.
        // To adjust PWM values dynamically, implement control code here
    }

    return XST_SUCCESS;
}
