#include "xiic.h"
#include "xil_printf.h"
#include "xparameters.h"

#define ADXL345_ADDR 0x53
#define POWER_CTL 0x2D
#define DATA_FORMAT 0x31
#define BW_RATE 0x2C
#define DATA_START 0x32

XIic IicInstance;

void initI2C() {
    XIic_Config *Config;
    int Status;

    Config = XIic_LookupConfig(XPAR_IIC_0_DEVICE_ID);
    if (Config == NULL) {
        xil_printf("Error: XIic_LookupConfig failed\r\n");
        return;
    }

    Status = XIic_CfgInitialize(&IicInstance, Config, Config->BaseAddress);
    if (Status != XST_SUCCESS) {
        xil_printf("Error: XIic_CfgInitialize failed\r\n");
        return;
    }

    XIic_Reset(&IicInstance);
    XIic_SetAddress(&IicInstance, XII_ADDR_TO_SEND_TYPE, ADXL345_ADDR);
}

void configureADXL345() {
    u8 dataBuffer[2];
    int Status;

    // Set the sensor to measure mode
    dataBuffer[0] = POWER_CTL;
    dataBuffer[1] = 0x08;
    Status = XIic_MasterSend(&IicInstance, dataBuffer, 2);
    if (Status != XST_SUCCESS) {
        xil_printf("Error setting measure mode: %d\r\n", Status);
    }

    // Additional setup can be added here (like setting DATA_FORMAT and BW_RATE)
}

void readADXL345(float* X_out, float* Y_out, float* Z_out) {
    u8 regAddress = DATA_START;
    u8 recvBuffer[6];
    int Status;

    // Start reading from DATA_START register
    Status = XIic_MasterSend(&IicInstance, &regAddress, 1);
    if (Status != XST_SUCCESS) {
        xil_printf("Error: XIic_MasterSend failed\r\n");
        return;
    }

    while (XIic_IsIicBusy(&IicInstance) == TRUE);

    // Read 6 bytes; 2 each for X, Y, Z
    Status = XIic_MasterRecv(&IicInstance, recvBuffer, 6);
    if (Status != XST_SUCCESS) {
        xil_printf("Error: XIic_MasterRecv failed\r\n");
        return;
    }

    // Convert readings to acceleration values
    *X_out = ((int16_t)((recvBuffer[1] << 8) | recvBuffer[0])) / 256.0;
    *Y_out = ((int16_t)((recvBuffer[3] << 8) | recvBuffer[2])) / 256.0;
    *Z_out = ((int16_t)((recvBuffer[5] << 8) | recvBuffer[4])) / 256.0;
}

int main() {
    init_platform();
    initI2C();
    configureADXL345();

    float X_out, Y_out, Z_out;

    while (1) {
        readADXL345(&X_out, &Y_out, &Z_out);
        xil_printf("Xa= %f   Ya= %f   Za= %f\r\n", X_out, Y_out, Z_out);
        usleep(1000000); // Delay for 1 second
    }

    cleanup_platform();
    return 0;
}
