#include "xiic.h"
#include "xil_printf.h"
#include "xparameters.h"

#define ADXL345_ADDR 0x53
#define ADXL345_REG_DATA_X0 0x32

XIic IicInstance;

void initI2C() {
    XIic_Config *Config;
    int Status;

    Config = XIic_LookupConfig(XPAR_IIC_0_DEVICE_ID);
    if (Config == NULL) {
        xil_printf("Error: XIic_LookupConfig failed\r\n");
        return;
    }

    Status = XIic_CfgInitialize(&IicInstance, Config, Config->BaseAddress);
    if (Status != XST_SUCCESS) {
        xil_printf("Error: XIic_CfgInitialize failed\r\n");
        return;
    }

    XIic_Reset(&IicInstance);

    Status = XIic_SetGpOutput(&IicInstance, 1);
    if (Status != XST_SUCCESS) {
        xil_printf("Error: XIic_SetGpOutput failed\r\n");
        return;
    }
}

int16_t readADXL345XAxis() {
    u8 recvBuffer[2];
    int Status;
    u8 regAddress = ADXL345_REG_DATA_X0;

    Status = XIic_MasterSend(&IicInstance, &regAddress, 1, ADXL345_ADDR);
    if (Status != XST_SUCCESS) {
        xil_printf("Error: XIic_MasterSend failed\r\n");
        return -1;
    }

    Status = XIic_MasterRecv(&IicInstance, recvBuffer, 2, ADXL345_ADDR);
    if (Status != XST_SUCCESS) {
        xil_printf("Error: XIic_MasterRecv failed\r\n");
        return -1;
    }

    int16_t accX = (recvBuffer[1] << 8) | recvBuffer[0];
    return accX;
}

int main() {
    init_platform();
    initI2C();

    while (1) {
        int16_t accX = readADXL345XAxis();
        xil_printf("Acceleration X: %d\r\n", accX);
        usleep(1000000); // Delay for 1 second
    }

    cleanup_platform();
    return 0;
}
