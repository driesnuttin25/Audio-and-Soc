#include "xiic.h"
#include "xil_printf.h"
#include "xparameters.h"

#define ADXL345_ADDR 0x53
#define ADXL345_REG_DATA_X0 0x32

XIic IicInstance;

void initI2C() {
    XIic_Config *Config;
    int Status;

    Config = XIic_LookupConfig(XPAR_IIC_0_DEVICE_ID);
    if (Config == NULL) {
        xil_printf("Error: XIic_LookupConfig failed\r\n");
        return;
    }

    Status = XIic_CfgInitialize(&IicInstance, Config, Config->BaseAddress);
    if (Status != XST_SUCCESS) {
        xil_printf("Error: XIic_CfgInitialize failed\r\n");
        return;
    }

    XIic_Reset(&IicInstance);

    // Set the I2C slave address for subsequent operations
    XIic_SetAddress(&IicInstance, XII_ADDR_TO_SEND_TYPE, ADXL345_ADDR);
}

int16_t readADXL345XAxis() {
    u8 recvBuffer[2] = {0};
    u8 regAddress = ADXL345_REG_DATA_X0;
    int Status;

    // Ensure start from DataX0 register for reading
    Status = XIic_MasterSend(&IicInstance, &regAddress, 1);
    if (Status != XST_SUCCESS) {
        xil_printf("Error: XIic_MasterSend failed\r\n");
        return -1;
    }

    // Ensure bus is not busy before receiving
    while (XIic_IsIicBusy(&IicInstance) == TRUE);

    // Read 2 bytes from the DataX0 and DataX1 registers
    Status = XIic_MasterRecv(&IicInstance, recvBuffer, 2);
    if (Status != XST_SUCCESS) {
        xil_printf("Error: XIic_MasterRecv failed\r\n");
        return -1;
    }

    int16_t accX = (recvBuffer[1] << 8) | recvBuffer[0];
    return accX;
}


void configureADXL345() {
    u8 dataBuffer[2];
    int Status;

    // Set the sensor to measure mode
    dataBuffer[0] = 0x2D;  // Power control register
    dataBuffer[1] = 0x08;  // Measure mode
    Status = XIic_MasterSend(&IicInstance, dataBuffer, 2);
    if (Status != XST_SUCCESS) {
        xil_printf("Error setting measure mode: %d\r\n", Status);
        return;
    }

    // Set data format (full resolution, +/- 16g)
    dataBuffer[0] = 0x31;  // Data format register
    dataBuffer[1] = 0x0B;  // Full resolution, +/- 16g, 4mg/LSB
    Status = XIic_MasterSend(&IicInstance, dataBuffer, 2);
    if (Status != XST_SUCCESS) {
        xil_printf("Error setting data format: %d\r\n", Status);
        return;
    }

    // Set the data rate (100 Hz)
    dataBuffer[0] = 0x2C;  // BW_RATE register
    dataBuffer[1] = 0x0A;  // 100 Hz
    Status = XIic_MasterSend(&IicInstance, dataBuffer, 2);
    if (Status != XST_SUCCESS) {
        xil_printf("Error setting data rate: %d\r\n", Status);
        return;
    }
}


int main() {
    init_platform();
    initI2C();
    configureADXL345();  // Configure the ADXL345 sensor for measurements

    while (1) {
        int16_t accX = readADXL345XAxis();
        xil_printf("Acceleration X: %d\r\n", accX);
        usleep(1000000); // Delay for 1 second
    }

    cleanup_platform();
    return 0;
}

