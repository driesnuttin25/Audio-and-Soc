#include <stdio.h>
#include "platform.h"
#include "xil_printf.h"
#include "arm_math.h"
#include "arm_const_structs.h"
#include "audio.h"
#include "xscutimer.h"
#include "xscugic.h"
#include "math.h"

#define UINT32_MAX_AS_FLOAT 4294967295.0f
#define UINT_SCALED_MAX_VALUE 0xFFFFF

#define TIMER_DEVICE_ID      XPAR_XSCUTIMER_0_DEVICE_ID
#define INTC_DEVICE_ID       XPAR_SCUGIC_SINGLE_DEVICE_ID
#define TIMER_IRPT_INTR      XPAR_SCUTIMER_INTR

#define SAMPLE_RATE          48000

volatile unsigned long u32DataL, u32DataR;

// Timer_ISR for DTMF sine generation
static void Timer_ISR(void * CallBackRef) {
    const float32_t frequency1 = 697;  // First frequency for DTMF tone
    const float32_t frequency2 = 1209; // Second frequency for DTMF tone
    const float32_t theta_increment1 = 2 * PI * frequency1 / SAMPLE_RATE;
    const float32_t theta_increment2 = 2 * PI * frequency2 / SAMPLE_RATE;
    static float32_t theta1 = 0.0f, theta2 = 0.0f;

    XScuTimer *TimerInstancePtr = (XScuTimer *) CallBackRef;
    XScuTimer_ClearInterruptStatus(TimerInstancePtr);

    // Update theta for both frequencies
    theta1 += theta_increment1;
    if (theta1 > 2 * PI)
        theta1 -= 2 * PI;

    theta2 += theta_increment2;
    if (theta2 > 2 * PI)
        theta2 -= 2 * PI;

    // Generate sine values for both frequencies
    float32_t sine_value1 = arm_sin_f32(theta1);
    float32_t sine_value2 = arm_sin_f32(theta2);

    // Combine the two frequencies
    float32_t combined_sine_value = (sine_value1 + sine_value2) / 2.0f;

    // Scale the combined signal to appropriate range for DAC
    uint32_t scaled_value = (uint32_t)(((combined_sine_value + 1.0f) * 0.5f) * UINT_SCALED_MAX_VALUE);

    Xil_Out32(I2S_DATA_TX_R_REG, scaled_value);
}

static int Timer_Intr_Setup(XScuGic * IntcInstancePtr, XScuTimer *TimerInstancePtr, u16 TimerIntrId) {
    int Status;
    XScuGic_Config *IntcConfig;
    IntcConfig = XScuGic_LookupConfig(INTC_DEVICE_ID);
    Status = XScuGic_CfgInitialize(IntcInstancePtr, IntcConfig, IntcConfig->CpuBaseAddress);
    Xil_ExceptionInit();
    Xil_ExceptionRegisterHandler(XIL_EXCEPTION_ID_IRQ_INT, (Xil_ExceptionHandler)XScuGic_InterruptHandler, IntcInstancePtr);
    Status = XScuGic_Connect(IntcInstancePtr, TimerIntrId, (Xil_ExceptionHandler)Timer_ISR, (void *)TimerInstancePtr);
    XScuGic_Enable(IntcInstancePtr, TimerIntrId);
    XScuTimer_EnableInterrupt(TimerInstancePtr);
    Xil_ExceptionEnable();
    return XST_SUCCESS;
}

int main() {
    int Status;
    init_platform();
    IicConfig(XPAR_XIICPS_0_DEVICE_ID);
    AudioPllConfig();
    AudioConfigureJacks();
    LineinLineoutConfig();

    XScuTimer Scu_Timer;
    XScuGic IntcInstance;
    XScuTimer_Config *Scu_ConfigPtr = XScuTimer_LookupConfig(TIMER_DEVICE_ID);
    Status = XScuTimer_CfgInitialize(&Scu_Timer, Scu_ConfigPtr, Scu_ConfigPtr->BaseAddr);
    Status = Timer_Intr_Setup(&IntcInstance, &Scu_Timer, TIMER_IRPT_INTR);
    XScuTimer_LoadTimer(&Scu_Timer, (XPAR_PS7_CORTEXA9_0_CPU_CLK_FREQ_HZ / 2) / SAMPLE_RATE);
    XScuTimer_EnableAutoReload(&Scu_Timer);
    XScuTimer_Start(&Scu_Timer);

    for(;;) {
        // This infinite loop keeps the program running
    }

    cleanup_platform();
    return 0;
}
